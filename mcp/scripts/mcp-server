#!/bin/bash

# mcp-server - Unified command for managing MCP servers
# Provides a simple interface for adding, removing, updating, and listing MCP servers

set -e

# Configuration paths
CONFIG_DIR=~/.config/mcp
ACTIVE_IMPL_DIR="$CONFIG_DIR/active-implementations"
SERVERS_BASE_DIR=~/.local/share/mcp-servers
LOCAL_BUILDS_DIR=~/ppv/pillars/dotfiles/mcp/servers
VENVS_BASE_DIR=~/ppv/pipelines/venvs/mcp-servers
MCP_CONFIG_FILE=~/.aws/amazonq/mcp.json

# Command and arguments
COMMAND=$1
SERVER=$2
IMPLEMENTATION=$3
REPO_URL=$4

# Help function
show_help() {
  echo "Usage: mcp-server <command> [options]"
  echo ""
  echo "Commands:"
  echo "  add <server> <implementation> <repo-url>  Add a new MCP server implementation"
  echo "  remove <server> [implementation]          Remove an MCP server implementation"
  echo "  update <server> [implementation]          Update an MCP server implementation"
  echo "  list                                      List all available MCP servers and implementations"
  echo ""
  echo "Examples:"
  echo "  mcp-server add git kzms https://github.com/atxtechbro/kzms-mcp-server-git.git"
  echo "  mcp-server remove git kzms"
  echo "  mcp-server update git"
  echo "  mcp-server list"
}

# List all servers and implementations
list_servers() {
  echo "Available MCP Servers:"
  echo "======================"
  
  # First, get all configured servers from mcp.json
  if [ -f "$MCP_CONFIG_FILE" ]; then
    # Extract server names from mcp.json using grep and sed
    # This handles the case where jq might not be available
    CONFIGURED_SERVERS=$(grep -o '"[^"]*": {' "$MCP_CONFIG_FILE" | sed 's/": {//g' | sed 's/"//g' | grep -v "env" | grep -v "mcpServers" | sort)
  else
    CONFIGURED_SERVERS=""
    echo "Warning: MCP configuration file not found at $MCP_CONFIG_FILE"
  fi
  
  # If no configured servers found, check if we have any local implementations
  if [ -z "$CONFIGURED_SERVERS" ] && [ ! -d "$SERVERS_BASE_DIR" ] && [ ! -d "$LOCAL_BUILDS_DIR" ]; then
    echo "No MCP servers found."
    return
  fi
  
  # Process each configured server
  for server in $CONFIGURED_SERVERS; do
    echo "• $server"
    
    # Check if we have local implementations for this server
    FOUND_IMPLEMENTATIONS=false
    
    # Check for locally built implementations
    if [ -d "$LOCAL_BUILDS_DIR/$server-mcp-server" ]; then
      FOUND_IMPLEMENTATIONS=true
      echo "  ✓ local-build - active"
    fi
    
    # Look for implementations across all server types
    for server_type in python typescript binary; do
      if [ -d "$SERVERS_BASE_DIR/$server_type/$server" ]; then
        # Get all implementations for this server
        for impl in $(find "$SERVERS_BASE_DIR/$server_type/$server" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; 2>/dev/null || echo ""); do
          if [ -z "$impl" ]; then
            continue
          fi
          
          FOUND_IMPLEMENTATIONS=true
          
          # Check if this is the active implementation
          if [ -f "$ACTIVE_IMPL_DIR/$server" ] && [ "$(cat "$ACTIVE_IMPL_DIR/$server")" = "$impl" ]; then
            echo "  ✓ $impl ($server_type) - active"
          else
            echo "  - $impl ($server_type)"
          fi
        done
      fi
    done
    
    # If no implementations found, show a message
    if [ "$FOUND_IMPLEMENTATIONS" = false ]; then
      echo "  (No local implementations)"
    fi
    
    echo ""
  done
  
  # Now check for any local implementations that aren't in the configured servers
  # This handles the case where someone has set up an implementation but not added it to mcp.json
  if [ -d "$SERVERS_BASE_DIR" ]; then
    for server_type in $(find "$SERVERS_BASE_DIR" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; 2>/dev/null || echo ""); do
      if [ -z "$server_type" ]; then
        continue
      fi
      
      for server in $(find "$SERVERS_BASE_DIR/$server_type" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; 2>/dev/null || echo ""); do
        if [ -z "$server" ]; then
          continue
        fi
        
        # Check if this server is already in the configured servers
        if ! echo "$CONFIGURED_SERVERS" | grep -q "^$server$"; then
          echo "• $server (not configured in mcp.json)"
          
          # Get all implementations for this server
          for impl in $(find "$SERVERS_BASE_DIR/$server_type/$server" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; 2>/dev/null || echo ""); do
            if [ -z "$impl" ]; then
              continue
            fi
            
            # Check if this is the active implementation
            if [ -f "$ACTIVE_IMPL_DIR/$server" ] && [ "$(cat "$ACTIVE_IMPL_DIR/$server")" = "$impl" ]; then
              echo "  ✓ $impl ($server_type) - active"
            else
              echo "  - $impl ($server_type)"
            fi
          done
          
          echo ""
        fi
      done
    done
  fi
}

# Add a new server implementation
add_server() {
  if [ -z "$SERVER" ] || [ -z "$IMPLEMENTATION" ] || [ -z "$REPO_URL" ]; then
    echo "Error: Missing required parameters"
    echo "Usage: mcp-server add <server> <implementation> <repo-url>"
    exit 1
  fi
  
  # Determine server type based on repo URL (default to python)
  SERVER_TYPE="python"
  if [[ "$REPO_URL" == *typescript* ]] || [[ "$REPO_URL" == *ts* ]]; then
    SERVER_TYPE="typescript"
  elif [[ "$REPO_URL" == *binary* ]] || [[ "$REPO_URL" == *bin* ]]; then
    SERVER_TYPE="binary"
  fi
  
  # Create directories
  SERVERS_DIR="$SERVERS_BASE_DIR/$SERVER_TYPE/$SERVER/$IMPLEMENTATION"
  VENV_DIR="$VENVS_BASE_DIR/$SERVER-$IMPLEMENTATION"
  
  mkdir -p "$SERVERS_DIR"
  mkdir -p "$(dirname "$VENV_DIR")"
  
  # Clone repository
  echo "Cloning $REPO_URL to $SERVERS_DIR..."
  git clone "$REPO_URL" "$SERVERS_DIR"
  
  # For Python servers, create a virtual environment and install the package
  if [ "$SERVER_TYPE" = "python" ]; then
    echo "Creating virtual environment at $VENV_DIR..."
    python -m venv "$VENV_DIR"
    
    echo "Installing package in development mode..."
    cd "$SERVERS_DIR"
    "$VENV_DIR/bin/pip" install -e .
  fi
  
  # Set as active implementation
  mkdir -p "$ACTIVE_IMPL_DIR"
  echo "$IMPLEMENTATION" > "$ACTIVE_IMPL_DIR/$SERVER"
  
  echo "Successfully set up $IMPLEMENTATION implementation for $SERVER MCP server"
  echo "The server is now active and ready to use"
}

# Remove a server implementation
remove_server() {
  if [ -z "$SERVER" ]; then
    echo "Error: Missing server parameter"
    echo "Usage: mcp-server remove <server> [implementation]"
    exit 1
  fi
  
  # If implementation is not specified, list available implementations
  if [ -z "$IMPLEMENTATION" ]; then
    echo "Available implementations for $SERVER:"
    FOUND_IMPLEMENTATIONS=false
    
    for server_type in python typescript binary; do
      if [ -d "$SERVERS_BASE_DIR/$server_type/$SERVER" ]; then
        for impl in $(find "$SERVERS_BASE_DIR/$server_type/$SERVER" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; 2>/dev/null || echo ""); do
          if [ -z "$impl" ]; then
            continue
          fi
          
          FOUND_IMPLEMENTATIONS=true
          
          if [ -f "$ACTIVE_IMPL_DIR/$SERVER" ] && [ "$(cat "$ACTIVE_IMPL_DIR/$SERVER")" = "$impl" ]; then
            echo "  ✓ $impl ($server_type) - active"
          else
            echo "  - $impl ($server_type)"
          fi
        done
      fi
    done
    
    if [ "$FOUND_IMPLEMENTATIONS" = false ]; then
      echo "  No implementations found for $SERVER"
    fi
    
    echo "Please specify which implementation to remove:"
    echo "  mcp-server remove $SERVER <implementation>"
    exit 0
  fi
  
  # Find the server type
  SERVER_TYPE=""
  for type in python typescript binary; do
    if [ -d "$SERVERS_BASE_DIR/$type/$SERVER/$IMPLEMENTATION" ]; then
      SERVER_TYPE="$type"
      break
    fi
  done
  
  if [ -z "$SERVER_TYPE" ]; then
    echo "Error: Implementation $IMPLEMENTATION for $SERVER not found"
    exit 1
  fi
  
  # Define paths
  SERVERS_DIR="$SERVERS_BASE_DIR/$SERVER_TYPE/$SERVER/$IMPLEMENTATION"
  VENV_DIR="$VENVS_BASE_DIR/$SERVER-$IMPLEMENTATION"
  ACTIVE_IMPL_FILE="$ACTIVE_IMPL_DIR/$SERVER"
  
  # Check if this is the active implementation
  if [ -f "$ACTIVE_IMPL_FILE" ] && [ "$(cat "$ACTIVE_IMPL_FILE")" = "$IMPLEMENTATION" ]; then
    echo "Warning: Removing the active implementation for $SERVER"
    echo "You will need to switch to another implementation after removal"
  fi
  
  # Confirm removal
  read -p "Are you sure you want to remove $IMPLEMENTATION implementation for $SERVER? (y/N) " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Operation cancelled"
    exit 0
  fi
  
  # Remove the implementation directory
  echo "Removing implementation directory at $SERVERS_DIR..."
  rm -rf "$SERVERS_DIR"
  
  # Remove the virtual environment if it exists
  if [ -d "$VENV_DIR" ]; then
    echo "Removing virtual environment at $VENV_DIR..."
    rm -rf "$VENV_DIR"
  fi
  
  # If this was the active implementation, suggest switching to another one
  if [ -f "$ACTIVE_IMPL_FILE" ] && [ "$(cat "$ACTIVE_IMPL_FILE")" = "$IMPLEMENTATION" ]; then
    # Find other available implementations across all server types
    OTHER_IMPLS=""
    for type in python typescript binary; do
      if [ -d "$SERVERS_BASE_DIR/$type/$SERVER" ]; then
        FOUND_IMPLS=$(find "$SERVERS_BASE_DIR/$type/$SERVER" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; 2>/dev/null || echo "")
        if [ -n "$FOUND_IMPLS" ]; then
          OTHER_IMPLS="$OTHER_IMPLS $FOUND_IMPLS"
        fi
      fi
    done
    
    if [ -n "$OTHER_IMPLS" ]; then
      echo "Available implementations for $SERVER:"
      echo "$OTHER_IMPLS" | tr ' ' '\n' | sed 's/^/  - /'
      echo "Please switch to another implementation using:"
      echo "  mcp-server update $SERVER <implementation>"
    else
      echo "No other implementations found for $SERVER"
      echo "You may need to set up a new implementation"
    fi
  fi
  
  echo "Successfully removed $IMPLEMENTATION implementation for $SERVER"
}

# Update a server implementation
update_server() {
  if [ -z "$SERVER" ]; then
    echo "Error: Missing server parameter"
    echo "Usage: mcp-server update <server> [implementation]"
    exit 1
  fi
  
  # If implementation is not specified, list available implementations
  if [ -z "$IMPLEMENTATION" ]; then
    echo "Available implementations for $SERVER:"
    FOUND_IMPLEMENTATIONS=false
    
    for server_type in python typescript binary; do
      if [ -d "$SERVERS_BASE_DIR/$server_type/$SERVER" ]; then
        for impl in $(find "$SERVERS_BASE_DIR/$server_type/$SERVER" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; 2>/dev/null || echo ""); do
          if [ -z "$impl" ]; then
            continue
          fi
          
          FOUND_IMPLEMENTATIONS=true
          
          if [ -f "$ACTIVE_IMPL_DIR/$SERVER" ] && [ "$(cat "$ACTIVE_IMPL_DIR/$SERVER")" = "$impl" ]; then
            echo "  ✓ $impl ($server_type) - active"
          else
            echo "  - $impl ($server_type)"
          fi
        done
      fi
    done
    
    if [ "$FOUND_IMPLEMENTATIONS" = false ]; then
      echo "  No implementations found for $SERVER"
    fi
    
    echo "Please specify which implementation to update:"
    echo "  mcp-server update $SERVER <implementation>"
    exit 0
  fi
  
  # Find the server type
  SERVER_TYPE=""
  for type in python typescript binary; do
    if [ -d "$SERVERS_BASE_DIR/$type/$SERVER/$IMPLEMENTATION" ]; then
      SERVER_TYPE="$type"
      break
    fi
  done
  
  if [ -z "$SERVER_TYPE" ]; then
    echo "Error: Implementation $IMPLEMENTATION for $SERVER not found"
    exit 1
  fi
  
  # Define paths
  SERVERS_DIR="$SERVERS_BASE_DIR/$SERVER_TYPE/$SERVER/$IMPLEMENTATION"
  VENV_DIR="$VENVS_BASE_DIR/$SERVER-$IMPLEMENTATION"
  
  # Update the repository
  echo "Updating $IMPLEMENTATION implementation for $SERVER..."
  cd "$SERVERS_DIR"
  git pull
  
  # For Python servers, update the package
  if [ "$SERVER_TYPE" = "python" ] && [ -d "$VENV_DIR" ]; then
    echo "Updating package installation..."
    "$VENV_DIR/bin/pip" install -e .
  fi
  
  # Set as active implementation
  mkdir -p "$ACTIVE_IMPL_DIR"
  echo "$IMPLEMENTATION" > "$ACTIVE_IMPL_DIR/$SERVER"
  
  echo "Successfully updated and activated $IMPLEMENTATION implementation for $SERVER"
}

# Main command processing
case "$COMMAND" in
  add)
    add_server
    ;;
  remove)
    remove_server
    ;;
  update)
    update_server
    ;;
  list)
    list_servers
    ;;
  help|--help|-h)
    show_help
    ;;
  *)
    echo "Error: Unknown command '$COMMAND'"
    show_help
    exit 1
    ;;
esac