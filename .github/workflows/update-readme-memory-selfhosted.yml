name: Update README Memory Section (Self-Hosted)

on:
  schedule:
    # Run daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      days:
        description: 'Number of days to analyze'
        required: false
        default: '7'
      runner_type:
        description: 'Runner type to use'
        required: false
        default: 'self-hosted'
        type: choice
        options:
          - self-hosted
          - github-hosted

permissions:
  contents: write

jobs:
  update-memory:
    runs-on: ${{ github.event.inputs.runner_type == 'github-hosted' && 'ubuntu-latest' || '[self-hosted, linux]' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history needed for git log analysis
        token: ${{ secrets.GITHUB_TOKEN }}
        # For self-hosted, avoid conflicts with existing checkouts
        clean: true
    
    - name: Detect environment
      id: detect_env
      run: |
        echo "Running on: ${{ runner.name }}"
        echo "Runner OS: ${{ runner.os }}"
        
        # Check if we're on self-hosted
        if [[ "${{ runner.name }}" != "GitHub Actions"* ]]; then
          echo "is_self_hosted=true" >> "$GITHUB_OUTPUT"
          echo "Detected self-hosted runner"
        else
          echo "is_self_hosted=false" >> "$GITHUB_OUTPUT"
          echo "Detected GitHub-hosted runner"
        fi
        
        # Check Python availability
        if command -v python3 &> /dev/null; then
          echo "python_available=true" >> "$GITHUB_OUTPUT"
          echo "Python3 version: $(python3 --version)"
        else
          echo "python_available=false" >> "$GITHUB_OUTPUT"
        fi
    
    - name: Set up Python (GitHub-hosted)
      if: steps.detect_env.outputs.is_self_hosted == 'false'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Verify Python (Self-hosted)
      if: steps.detect_env.outputs.is_self_hosted == 'true' && steps.detect_env.outputs.python_available == 'false'
      run: |
        echo "ERROR: Python3 is required on self-hosted runners"
        echo "Please install Python3 on your runner"
        exit 1
    
    - name: Configure Git
      run: |
        # Use different email for self-hosted vs GitHub-hosted
        if [[ "${{ steps.detect_env.outputs.is_self_hosted }}" == "true" ]]; then
          git config --local user.email "self-hosted-action@localhost"
          git config --local user.name "Self-Hosted Action"
        else
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
        fi
    
    - name: Update README Memory Section
      run: |
        # Use input days if provided, otherwise default to 7
        DAYS="${{ github.event.inputs.days || '7' }}"
        
        # Add error handling for self-hosted environments
        if ! python3 utils/update-readme-memory.py $DAYS; then
          echo "Failed to update README memory section"
          exit 1
        fi
    
    - name: Check for changes
      id: check_changes
      run: |
        if [[ -n $(git status --porcelain README.md) ]]; then
          echo "changed=true" >> "$GITHUB_OUTPUT"
          echo "README.md has changes"
        else
          echo "changed=false" >> "$GITHUB_OUTPUT"
          echo "No changes to README.md"
        fi
    
    - name: Commit and push changes
      if: steps.check_changes.outputs.changed == 'true'
      run: |
        git add README.md
        
        # Include runner type in commit message
        RUNNER_TYPE="${{ steps.detect_env.outputs.is_self_hosted == 'true' && 'self-hosted' || 'GitHub-hosted' }}"
        
        git commit -m "chore[docs]: auto-update README memory section

        Auto-generated memory context from last ${{ github.event.inputs.days || '7' }} days of git activity.
        Generated by: $RUNNER_TYPE runner
        
        Principle: systems-stewardship"
        
        # Push with retry for self-hosted (network issues)
        RETRY_COUNT=0
        MAX_RETRIES=3
        until git push || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
          RETRY_COUNT=$((RETRY_COUNT + 1))
          echo "Push failed, retry $RETRY_COUNT of $MAX_RETRIES"
          sleep 5
        done
        
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "Failed to push after $MAX_RETRIES attempts"
          exit 1
        fi
    
    - name: Cleanup workspace (Self-hosted)
      if: always() && steps.detect_env.outputs.is_self_hosted == 'true'
      run: |
        echo "Cleaning up self-hosted runner workspace"
        # Reset any changes
        git reset --hard HEAD || true
        # Clean untracked files
        git clean -fdx || true
        # Go back to default branch
        git checkout main || true