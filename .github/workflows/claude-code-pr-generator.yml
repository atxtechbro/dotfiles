name: Claude Code PR Generator

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: number
  issues:
    types: [labeled]

jobs:
  generate-pr:
    if: ${{ github.event.label.name == 'ai-generate' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code
        run: npm install -g @anthropic-ai/claude-code

      - name: Get issue details
        id: issue
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.payload.issue?.number || context.payload.inputs.issue_number;
            if (!issueNumber) {
              core.setFailed('No issue number provided');
              return;
            }
            
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            
            const title = issue.data.title;
            const body = issue.data.body;
            
            // Create a branch name from the issue title
            const branchName = `ai-${issueNumber}-${title.toLowerCase()
              .replace(/[^\w\s-]/g, '')
              .replace(/[\s_-]+/g, '-')
              .slice(0, 50)}`;
            
            core.setOutput('issue_number', issueNumber);
            core.setOutput('issue_title', title);
            core.setOutput('issue_body', body);
            core.setOutput('branch_name', branchName);

      - name: Create branch
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git checkout -b ${{ steps.issue.outputs.branch_name }}

      - name: Run Claude Code
        id: claude
        run: |
          # Simply pass the issue to Claude and let it figure out what to do
          claude -p "Implement the feature described in issue #${{ steps.issue.outputs.issue_number }}: ${{ steps.issue.outputs.issue_title }}\n\n${{ steps.issue.outputs.issue_body }}" \
            --allowedTools "mcp__filesystem__*,mcp__github__*" \
            --system-prompt "$(cat AmazonQ.md)" \
            --output-format json > claude_response.json
          
          # Extract the response
          RESPONSE=$(cat claude_response.json | jq -r '.result')
          echo "CLAUDE_RESPONSE<<EOF" >> $GITHUB_ENV
          echo "$RESPONSE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Commit and push changes
        run: |
          # Add any files that were created or modified
          git add .
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 1
          fi
          
          git commit -m "feat: implement changes for issue #${{ steps.issue.outputs.issue_number }}"
          git push origin ${{ steps.issue.outputs.branch_name }}

      - name: Create Pull Request
        id: create-pr
        uses: actions/github-script@v7
        with:
          script: |
            const result = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `AI: ${process.env.ISSUE_TITLE}`,
              body: `Resolves #${process.env.ISSUE_NUMBER}\n\n${process.env.CLAUDE_RESPONSE}`,
              head: process.env.BRANCH_NAME,
              base: 'main'
            });
            
            // Add a comment to the issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: process.env.ISSUE_NUMBER,
              body: `I've created a pull request with an implementation: ${result.data.html_url}`
            });
          env:
            ISSUE_NUMBER: ${{ steps.issue.outputs.issue_number }}
            ISSUE_TITLE: ${{ steps.issue.outputs.issue_title }}
            BRANCH_NAME: ${{ steps.issue.outputs.branch_name }}
