name: Claude Code PR Generator

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: number
  issues:
    types: [labeled]

jobs:
  generate-pr:
    if: ${{ github.event.label.name == 'ai-generate' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and Claude Code
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code
        run: npm install -g @anthropic-ai/claude-code

      - name: Get issue and let Claude implement it
        id: claude
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.payload.issue?.number || context.payload.inputs.issue_number;
            if (!issueNumber) {
              core.setFailed('No issue number provided');
              return;
            }
            
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            
            const title = issue.data.title;
            const body = issue.data.body;
            
            // Create a branch name from the issue title
            const branchName = `ai-${issueNumber}-${title.toLowerCase()
              .replace(/[^\w\s-]/g, '')
              .replace(/[\s_-]+/g, '-')
              .slice(0, 50)}`;
            
            // Set up git for Claude
            await exec.exec('git config user.name "GitHub Action"');
            await exec.exec('git config user.email "action@github.com"');
            await exec.exec(`git checkout -b ${branchName}`);
            
            // Let Claude handle everything
            const { stdout } = await exec.getExecOutput(
              'claude',
              [
                '-p',
                `Implement issue #${issueNumber}: ${title}\n\n${body}`,
                '--allowedTools', 'mcp__filesystem__*,mcp__github__*',
                '--system-prompt', '$(cat AmazonQ.md)',
                '--output-format', 'json'
              ]
            );
            
            const claudeResponse = JSON.parse(stdout).result;
            
            // Create PR
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `AI: ${title}`,
              body: `Resolves #${issueNumber}\n\n${claudeResponse}`,
              head: branchName,
              base: 'main'
            });
            
            // Comment on the issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `I've created a pull request with an implementation: ${pr.data.html_url}`
            });
