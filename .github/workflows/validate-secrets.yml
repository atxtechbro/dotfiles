name: Validate Secrets Configuration

on:
  pull_request:
    paths:
      - '.bash_secrets.example'
      - '.bashrc'
      - '.github/workflows/validate-secrets.yml'
      - '!**.md'
      - '!LICENSE'
      - '!.gitignore'
  workflow_dispatch:

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up test environment
        run: |
          # Create a test home directory
          mkdir -p /tmp/test-home
          export HOME=/tmp/test-home
          
          # Create a test secrets file from the example
          cp .bash_secrets.example .bash_secrets.test
          
          # Add a test AWS access key (non-sensitive placeholder)
          echo 'export AWS_ACCESS_KEY_ID="AKIAIOSFODNN7EXAMPLE"' > .bash_secrets.test
          
          # Set proper permissions
          chmod 600 .bash_secrets.test

      - name: Validate secrets loading
        run: |
          export HOME=/tmp/test-home
          
          # Create a test script that sources the secrets file and checks if the variable is available
          echo '#!/bin/bash' > test_secrets.sh
          echo 'source .bash_secrets.test' >> test_secrets.sh
          echo 'if [[ -n "$AWS_ACCESS_KEY_ID" && "$AWS_ACCESS_KEY_ID" == "AKIAIOSFODNN7EXAMPLE" ]]; then' >> test_secrets.sh
          echo '  echo "✅ Secret loading mechanism works correctly"' >> test_secrets.sh
          echo '  exit 0' >> test_secrets.sh
          echo 'else' >> test_secrets.sh
          echo '  echo "❌ Failed to load secrets properly"' >> test_secrets.sh
          echo '  exit 1' >> test_secrets.sh
          echo 'fi' >> test_secrets.sh
          
          # Make it executable
          chmod +x test_secrets.sh
          
          # Run the test
          ./test_secrets.sh

      - name: Verify permissions
        run: |
          # Check if permissions are set correctly
          PERMS=$(stat -c "%a" .bash_secrets.test)
          if [[ "$PERMS" == "600" ]]; then
            echo "✅ File permissions set correctly to 600"
            exit 0
          else
            echo "❌ File permissions not set to 600 (current: $PERMS)"
            exit 1
          fi

      - name: Clean up
        run: |
          rm -f .bash_secrets.test test_secrets.sh
