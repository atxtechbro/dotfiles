# Claude Implementation Workflow
# THE SINGLE SOURCE OF TRUTH for @claude mentions in issues and PRs
# 
# This is the ONLY workflow that responds to @claude mentions.
# Uses the official anthropics/claude-code-base-action@beta to:
# - Implement issues when @claude is mentioned WITH FULL KNOWLEDGE BASE CONTEXT
# - Review PRs when @claude is mentioned
# - Create branches and push changes with proper permissions
#
# Note: Both claude[bot] and github-actions[bot] comments come from this workflow.
# The bot identity depends on the context and step being executed.
#
# KNOWLEDGE INJECTION: This workflow now aggregates and injects the full knowledge base
# into Claude's context, providing the same rich context as local /close-issue commands.
#
# Principle: subtraction-creates-value (removed duplicate workflow)
# Principle: systems-stewardship (single clear workflow to maintain)
# Principle: snowball-method (knowledge persistence and compound improvement)

name: Claude Implementation
on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  claude-assistant:
    if: contains(github.event.comment.body, '@claude')
    runs-on: ubuntu-latest

    steps:
      - name: Acknowledge request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Add appropriate reaction based on context
              let reaction;
              
              if (context.payload.issue && !context.payload.issue.pull_request) {
                // üöÄ = Claude is implementing (for issues)
                reaction = 'rocket';
              } else {
                // üëÄ = Claude is reviewing (for PRs)
                reaction = 'eyes';
              }
              
              const reactionResponse = await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: reaction
              });
              
              console.log(`‚úÖ Successfully added ${reaction} reaction to comment ${context.payload.comment.id}`);
            } catch (error) {
              console.error(`‚ùå Failed to add reaction: ${error.message}`);
              console.error(`Comment ID: ${context.payload.comment.id}`);
              console.error(`Repository: ${context.repo.owner}/${context.repo.repo}`);
              // Don't fail the workflow if reaction fails
              // The implementation should still proceed
            }

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Aggregate knowledge base
        id: knowledge
        run: |
          echo "Aggregating knowledge base for Claude..."
          KNOWLEDGE=$(.github/scripts/aggregate-knowledge.sh)
          
          # Use EOF delimiter to handle multi-line content
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$KNOWLEDGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Log size for debugging
          echo "Knowledge base size: $(echo "$KNOWLEDGE" | wc -c) characters"

      - name: Prepare implementation prompt
        id: prepare-prompt
        run: |
          # Determine if this is an issue or PR
          IS_ISSUE="${{ github.event.issue && !github.event.issue.pull_request }}"
          
          if [ "$IS_ISSUE" == "true" ]; then
            echo "Preparing prompt for issue implementation..."
            
            # Get issue details
            ISSUE_NUMBER="${{ github.event.issue.number }}"
            ISSUE_TITLE="${{ github.event.issue.title }}"
            ISSUE_BODY="${{ github.event.issue.body }}"
            
            # Write knowledge to temp file (already safely in GITHUB_OUTPUT)
            cat <<'KNOWLEDGE_EOF' > /tmp/knowledge.txt
          ${{ steps.knowledge.outputs.content }}
          KNOWLEDGE_EOF
            
            # Load the template
            TEMPLATE_FILE="knowledge/procedures/close-issue-procedure.md"
            
            # Use awk to safely replace the KNOWLEDGE_BASE placeholder with file content
            awk '
              /\{\{ KNOWLEDGE_BASE \}\}/ {
                while ((getline line < "/tmp/knowledge.txt") > 0) {
                  print line
                }
                close("/tmp/knowledge.txt")
                next
              }
              {print}
            ' "$TEMPLATE_FILE" > /tmp/prompt_with_knowledge.md
            
            # Now do simple replacements on the result
            PROMPT=$(cat /tmp/prompt_with_knowledge.md)
            PROMPT="${PROMPT//\{\{ ISSUE_NUMBER \}\}/$ISSUE_NUMBER}"
            PROMPT="${PROMPT//\{\{ ISSUE_TITLE \}\}/$ISSUE_TITLE}"
            PROMPT="${PROMPT//\{\{ ISSUE_BODY \}\}/$ISSUE_BODY}"
            PROMPT="${PROMPT//\{\{ REPO \}\}/${{ github.repository }}}"
          else
            echo "Preparing prompt for PR review..."
            # For PR reviews, write knowledge to temp file then concatenate
            cat <<'KNOWLEDGE_EOF' > /tmp/knowledge.txt
          ${{ steps.knowledge.outputs.content }}
          KNOWLEDGE_EOF
            
            # Build the PR review prompt
            {
              cat /tmp/knowledge.txt
              echo ""
              echo "## PR Review Request"
              echo ""
              echo "The user has requested: ${{ github.event.comment.body }}"
              echo ""
              echo "Please review and respond to this pull request comment with the full context of the codebase principles and procedures available above."
            } > /tmp/pr_prompt.md
            
            PROMPT=$(cat /tmp/pr_prompt.md)
          fi
          
          # Output the prompt
          echo "prompt<<EOF" >> $GITHUB_OUTPUT
          echo "$PROMPT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - uses: anthropics/claude-code-base-action@beta
        with:
          prompt: ${{ steps.prepare-prompt.outputs.prompt }}
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          allowed_tools: "Bash(*),LS,Read,Write,Edit,MultiEdit,Glob,Grep,Task,TodoWrite,WebFetch(domain:*),WebSearch,mcp__git,mcp__github"
          timeout_minutes: "30"