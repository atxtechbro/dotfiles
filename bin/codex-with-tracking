#!/bin/bash
# codex-with-tracking - Run OpenAI Codex CLI with MLflow session tracking
#
# This wrapper preserves Codex's full interactive experience while
# capturing the session for MLflow tracking and analysis.
#
# Usage: codex-with-tracking "your codex command here"
# Example: codex-with-tracking "implement feature"

set -euo pipefail

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Determine dotfiles root
DOT_DEN="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Ensure MLflow is running
if [[ -x "$DOT_DEN/bin/start-mlflow" ]]; then
    "$DOT_DEN/bin/start-mlflow" start >/dev/null 2>&1
fi

# Generate session ID and paths
SESSION_ID="codex_$(date +%Y%m%d_%H%M%S)_$$"
SESSION_LOG="/tmp/${SESSION_ID}.log"
SESSION_METADATA="/tmp/${SESSION_ID}.meta"

# Function to cleanup on exit
cleanup() {
    local exit_code=$?

    # Parse and send session to MLflow (in background to not block)
    if [[ -f "$SESSION_LOG" ]]; then
        echo -e "\n${BLUE}ðŸ“Š Sending session to MLflow...${NC}"

        # Run parser with uv to ensure mlflow is available
        uv run --with mlflow python "$DOT_DEN/tracking/parse_claude_session.py" \
            "$SESSION_LOG" \
            "$SESSION_METADATA" \
            "$exit_code" 2>/dev/null &

        # Brief pause to let it start
        sleep 1
        echo -e "${GREEN}âœ“ Session logged to MLflow${NC}"
        echo -e "${BLUE}View at: http://localhost:5000${NC}"
    fi

    # Clean up temporary files after a delay (let MLflow finish first)
    (sleep 10 && rm -f "$SESSION_LOG" "$SESSION_METADATA" 2>/dev/null) &
}

# Set up exit trap
trap cleanup EXIT

# Save metadata about the session
cat > "$SESSION_METADATA" <<EOF
{
    "session_id": "$SESSION_ID",
    "command": "$*",
    "ai_provider": "codex",
    "start_time": "$(date -Iseconds)",
    "user": "$USER",
    "pwd": "$PWD",
    "dotfiles_root": "$DOT_DEN"
}
EOF

# Inform user
echo -e "${BLUE}â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®${NC}"
echo -e "${BLUE}â”‚ ðŸš€ Codex with MLflow Tracking Active   â”‚${NC}"
echo -e "${BLUE}â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤${NC}"
echo -e "${BLUE}â”‚ Session: ${SESSION_ID:0:20}... â”‚${NC}"
echo -e "${BLUE}â”‚ Tracking to: http://localhost:5000     â”‚${NC}"
echo -e "${BLUE}â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯${NC}"
echo ""

# Run Codex with full interactivity, capturing output
# Using 'script' to capture terminal session including colors and control chars
script -q -c "codex $*" "$SESSION_LOG"

# Exit code is preserved by trap