#!/bin/bash
# Convert AmazonQ.md files to AI-RULES.md with symlinks pattern
# This implements the standardized AI context file structure

set -euo pipefail

# Source logging framework
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/../utils/logging.sh"

# Function to process a single repository
process_repo() {
    local repo_path="$1"
    local repo_name=$(basename "$repo_path")
    
    log_info "Processing: $repo_path"
    
    cd "$repo_path"
    
    # Check if it's a git repository
    if [ ! -d .git ]; then
        log_error "Not a git repository, skipping"
        return 1
    fi
    
    # Check if AmazonQ.md exists
    if [ ! -f "AmazonQ.md" ]; then
        log_info "No AmazonQ.md found, skipping"
        return 0
    fi
    
    # Check if already converted
    if [ -L "AmazonQ.md" ] && [ -f "AI-RULES.md" ]; then
        log_success "Already converted"
        return 0
    fi
    
    # Perform conversion
    log_info "Converting AmazonQ.md to AI-RULES.md..."
    
    # Move AmazonQ.md to AI-RULES.md
    git mv AmazonQ.md AI-RULES.md
    
    # Create symlink: AmazonQ.md -> AI-RULES.md
    ln -s AI-RULES.md AmazonQ.md
    git add AmazonQ.md
    
    # Create symlink: CLAUDE.md -> AI-RULES.md (if it doesn't exist)
    if [ ! -e "CLAUDE.md" ]; then
        ln -s AI-RULES.md CLAUDE.md
        git add CLAUDE.md
    elif [ ! -L "CLAUDE.md" ]; then
        log_warning "CLAUDE.md exists but is not a symlink, manual intervention needed"
    fi
    
    # Commit changes
    if git diff --cached --quiet; then
        log_info "No changes to commit"
    else
        git commit -m "refactor: standardize AI context files to AI-RULES.md pattern

- Rename AmazonQ.md to AI-RULES.md
- Create symlinks: AmazonQ.md -> AI-RULES.md
- Create symlinks: CLAUDE.md -> AI-RULES.md

This follows the dotfiles repository pattern for AI context management.

Principle: systems-stewardship"
        
        # Push to remote
        log_info "Pushing to remote..."
        git push
        
        log_success "Successfully converted and pushed"
    fi
    
    return 0
}

# Main execution
main() {
    echo "ðŸ”„ AI Rules File Converter"
    echo "=========================="
    echo
    echo "This script converts AmazonQ.md files to the standardized AI-RULES.md pattern"
    echo "with symlinks for both AmazonQ.md and CLAUDE.md pointing to AI-RULES.md."
    echo
    
    # Parse arguments
    if [ $# -eq 0 ]; then
        echo "Usage: $0 <repo-path> [repo-path ...]"
        echo "   or: $0 --find-all"
        echo
        echo "Examples:"
        echo "  $0 ~/work/my-project"
        echo "  $0 ~/work/project1 ~/work/project2"
        echo "  $0 --find-all    # Find and process all repos with AmazonQ.md"
        exit 1
    fi
    
    local repos=()
    
    if [ "$1" == "--find-all" ]; then
        log_info "Finding all repositories with AmazonQ.md files in home directory..."
        
        # Depth-first search through home directory for all AmazonQ.md files
        while IFS= read -r amazonq_file; do
            repo_dir=$(dirname "$amazonq_file")
            # Check if it's a git repo
            if [ -d "$repo_dir/.git" ]; then
                repos+=("$repo_dir")
            fi
        done < <(find ~ -name "AmazonQ.md" -type f 2>/dev/null | sort)
        
        echo "Found ${#repos[@]} repositories with AmazonQ.md files"
        echo
        
        if [ ${#repos[@]} -eq 0 ]; then
            echo "No repositories found with AmazonQ.md files"
            exit 0
        fi
        
        # Show what will be processed
        echo "Will process:"
        for repo in "${repos[@]}"; do
            echo "  - $repo"
        done
        echo
        
        read -p "Continue? (y/N) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Aborted."
            exit 0
        fi
    else
        # Use provided paths
        repos=("$@")
    fi
    
    echo
    
    # Process each repository
    local success=0
    local failed=0
    
    for repo in "${repos[@]}"; do
        if process_repo "$repo"; then
            ((success++))
        else
            ((failed++))
        fi
        echo
    done
    
    # Summary
    echo "Summary:"
    echo "  âœ“ Successful: $success"
    if [ $failed -gt 0 ]; then
        echo "  âœ— Failed: $failed"
    fi
}

# Run main function
main "$@"